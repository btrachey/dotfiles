# Bubble Theme
# Inspired by bubblewritten and agnoster
# written by hohmannr

# SYMBOL CONSTANTS
blub_left='─┤ '
blub_right=' ├─'
# top_line_start_symbol='╭─'
# middle_line_start_symbol='├─'
top_line_start_symbol='╭'
middle_line_start_symbol='├'

# prompt_symbol='╰▶'
prompt_symbol='╰╼ '

user_symbol='%n'
user_machine_symbol=' גּ '
machine_symbol='%M'

filepath_symbol='%~'

git_branch_symbol=''
git_clean_symbol=''
git_modified_symbol='•'
git_added_symbol=''
git_deleted_symbol=''
git_renamed_symbol=''
git_untracked_symbol='裸'
git_copied_symbol=''
git_unmerged_symbol='!'
git_stashed_symbol=''

ssh_symbol='ssh'

pyenv_symbol=''
jdk_symbol=''

emails_symbol='黎'
messages_symbol=''
battery_symbol='  '
battery_mid_percent_threshold=50
battery_low_percent_threshold=20

# COLOR CONSTANTS
# NOTE: Possible values include zsh-color-strings like 'red', 'black', 'magenta' etc. Aswell as zsh-color-codes which you can list with the command 'spectrum_ls', e.g. '078' for the 78th color code.
# bubble_color='240'

prompt_symbol_color='blue'
prompt_symbol_error_color='magenta'

user_color='yellow'
user_machine_symbol_color='green'
machine_color='magenta'

filepath_color='cyan'

git_clean_color='green'
git_unstaged_color='yellow'
git_staged_color='magenta' 
git_stashed_color='blue'
git_unmerged_color='red'
git_symbols_color='black'

ssh_symbol_color='black'
ssh_bubble_color='green'

pyenv_symbol_color='green'
jdk_symbol_color='green'

emails_symbol_color='green'
messages_symbol_color='green'

battery_mid_color='yellow'
battery_low_color='red'
battery_symbol_color='black'

foreground () {
    #echo -n "%{%F{$1}$2%f%}"
    # Helper function for 256 color support beyond basic color terms such as 'black', 'red' ...
    if [[ $1 =~ '[0-9]{3}' && $1 -le 255 && $1 -ge 0 ]]; then
        echo -n "%{$FG[$1]%}"
    else
        echo -n "%{$fg[$1]%}"
    fi
}

background () {
    #echo -n "%{%K{$1}$2%k%}"
    # Helper function for 256 color support beyond basic color terms such as 'black', 'red' ...
    if [[ $1 =~ '[0-9]{3}' && $1 -le 255 && $1 -ge 0 ]]; then
        echo "%{$BG[$1]%}"
    else
        echo "%{$bg[$1]%}"
    fi
}

bracket () {
  echo -n "%(?,$(foreground $prompt_symbol_color)$1,$(foreground $prompt_symbol_error_color)$1)"
}

bubble_left () {
  bracket $blub_left
}

bubble_right () {
  bracket $blub_right
}

# PROMPT FUNCTIONS
git_bubble () {
    # This parses 'git status -s' to retrieve all necessary information...I am new to this zsh scripting...mercy!
    local git_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)

    if [[ -n $git_branch ]]; then
        # branch name with symbol, initialize symbols and git status output
        local git_info="$git_branch_symbol $git_branch"
        local git_symbols=""
        local git_status=$(git status -s 2> /dev/null | awk '{print substr($0,1,2)}') 

        # used for coloring (and some for icons)
        local git_unmerged=$(grep -m1 -E -- 'U|DD|AA' <<< $git_status)
        local git_branch_stashed=$(git stash list | grep $git_branch)
        local git_unstaged=$(echo -n $git_status | awk '{print substr($0,2,1)}')

        # used for icons
        local git_not_clean=$git_status
        local git_modified=$(grep -m1 'M' <<< $git_status)
        local git_added=$(grep -m1 'A' <<< $git_status)
        local git_deleted=$(grep -m1 'D' <<< $git_status)
        local git_untracked=$(grep -m1 '??' <<< $git_status)
        local git_renamed=$(grep -m1 'R' <<< $git_status)
        local git_copied=$(grep -m1 'C' <<< $git_status)

        # coloring
        if [[ -n $git_unmerged ]]; then
            local git_color=$git_unmerged_color   
            git_symbols="$git_symbols$git_unmerged_symbol"
        elif [[ -n $git_branch_stashed ]]; then
            local git_color=$git_stashed_color
            git_symbols="$git_symbols$git_stashed_symbol"
        elif [[ -n "${git_unstaged//[$' \t\r\n']}" && -n $git_not_clean ]]; then
            local git_color=$git_unstaged_color
        elif [[ -z "${git_unstaged//[$' \t\r\n']}" && -n $git_not_clean ]]; then
            local git_color=$git_staged_color
        else
            local git_color=$git_clean_color
            git_symbols="$git_symbols$git_clean_symbol"
        fi

        # icons
        if [[ -n $git_modified ]]; then
            git_symbols="$git_symbols$git_modified_symbol"
        fi
        if [[ -n $git_added ]]; then
            git_symbols="$git_symbols$git_added_symbol"
        fi
        if [[ -n $git_deleted ]]; then
            git_symbols="$git_symbols$git_deleted_symbol"
        fi
        if [[ -n $git_untracked ]]; then
            git_symbols="$git_symbols$git_untracked_symbol"
        fi
        if [[ -n $git_renamed ]]; then
            git_symbols="$git_symbols$git_renamed_symbol"
        fi
        if [[ -n $git_copied ]]; then
            git_symbols="$git_symbols$git_copied_symbol"
        fi

        echo -n "$(bubble_left)$(foreground $git_color)$git_info $git_symbols$(bubble_right)"
        # echo -n "$(bubblify 0 "$git_info " $git_color $bubble_color)$(bubblify 2 " $git_symbols " $git_symbols_color $git_color)"
    fi
}

ssh_bubble () {
    # detects an ssh connection and displays a bubble 
    if [[ -n $SSH_CLIENT || -n $SSH_TTY || -n $SSH_CONNECTION ]]; then
      echo -n "$(bubble_left)$(foreground $ssh_bubble_color)$ssh_symbol$(bubble_right)"
        # echo -n "$(bubblify 3 "$ssh_symbol" $ssh_symbol_color $ssh_bubble_color) "
    fi
}

pyenv_bubble () {
  # detects pyenv virtualenv and displays a bubble
  if [[ -n "$VIRTUAL_ENV" ]]; then
    local virtualenv_segment=$(echo "$VIRTUAL_ENV" | rev | cut -d '/' -f1 | rev)
    local virtualenv_string="$pyenv_symbol $virtualenv_segment"
    echo -n "$(bubble_left)$(foreground $pyenv_symbol_color)$virtualenv_string$(bubble_right)"
  fi
}

jdk_bubble () {
  if command -v realpath &> /dev/null; then
    if [[ -n "$JAVA_HOME" ]]; then
      local jdk_version=$(realpath "$JAVA_HOME" | awk -F/ '{print $NF}')
      echo -n "$(bubble_left)$(foreground $jdk_symbol_color)$jdk_symbol $jdk_version$(bubble_right)"
    fi
  fi
}

new_emails_bubble () {
  local EMAILS_TODAY="$(cat $HOME/.new_emails_count)"
  if [ "$EMAILS_TODAY" -gt 0 ]; then
    echo -n "$(bubble_left)$(foreground $emails_symbol_color)$emails_symbol$EMAILS_TODAY$(bubble_right)"
  fi
}

battery_bubble () {
  local BATTERY_PERCENT=$(pmset -g batt | grep InternalBattery | grep -oE '[0-9]{1,3}%' | cut -d '%' -f1)
  if [[ "$BATTERY_PERCENT" -le "$battery_mid_percent_threshold" && "$BATTERY_PERCENT" -gt "$battery_low_percent_threshold" ]]; then
    echo -n "$(bubble_left)$(foreground $battery_mid_color)$battery_symbol $BATTERY_PERCENT%%$(bubble_right)"
  elif [[ "$BATTERY_PERCENT" -le "$battery_low_percent_threshold" ]]; then
    echo -n "$(bubble_left)$(foreground $battery_low_color)$battery_symbol $BATTERY_PERCENT%%$(bubble_right)"
  else
     echo -n ""
  fi
}

next_event_bubble () {
    local NEXT_EVENT="$(cat $HOME/.minutes_to_next_event)"
    if !  [ "$NEXT_EVENT" = "None" ] && [ "$NEXT_EVENT" ]; then
      local NEXT_EVENT_TIME="$(awk '{print $1}' $HOME/.minutes_to_next_event)"
      local NOW_INSTANT=$(date +%s)
      local MEETING_TIME_INSTANT=$(date -j -f "%H:%M" "$NEXT_EVENT_TIME" +%s)
      local INSTANT_DIFF=$(($MEETING_TIME_INSTANT - $NOW_INSTANT))
      local MINUTES_TO_NEXT_EVENT=$(($INSTANT_DIFF/60))
      if [ $MINUTES_TO_NEXT_EVENT -ge 5 ]; then
        echo -n "$(bubble_left)$(foreground 'green')$NEXT_EVENT$(bubble_right)"
      elif [ $MINUTES_TO_NEXT_EVENT -lt 5 ] && [ $MINUTES_TO_NEXT_EVENT -ge 2 ]; then
        echo -n "$(bubble_left)$(foreground 'yellow')$NEXT_EVENT$(bubble_right)"
      else
        echo -n "$(bubble_left)$(foreground 'red')$NEXT_EVENT$(bubble_right)"
      fi  
    fi
}

unread_imessage_bubble () {
  local UNREAD_COUNT="$(imessage_unread_today)"
  if ! [ "$UNREAD_COUNT" -eq 0 ]; then
    echo -n "$(bubble_left)$(foreground $messages_symbol_color)$messages_symbol $UNREAD_COUNT$(bubble_right)"
  fi
}


#end_of_prompt_bubble="$bubble_left%(?,$(foreground $prompt_symbol_color)$prompt_symbol,$(foreground $prompt_symbol_error_color)$prompt_symbol)$bubble_right"

end_of_prompt="%(?,$(foreground $prompt_symbol_color)$prompt_symbol,$(foreground $prompt_symbol_error_color)$prompt_symbol)"
line_end="%(?,$(foreground $prompt_symbol_color)╼,$(foreground $prompt_symbol_error_color)╼)"
top_line_start="%(?,$(foreground $prompt_symbol_color)$top_line_start_symbol%{$reset_color%},$(foreground $prompt_symbol_error_color)$top_line_start_symbol%{$reset_color%})"
middle_line_start="%(?,$(foreground $prompt_symbol_color)$middle_line_start_symbol%{$reset_color%},$(foreground $prompt_symbol_error_color)$middle_line_start_symbol%{$reset_color%})"

start_of_rprompt="%(?,$(foreground $prompt_symbol_color)╾,$(foreground $prompt_symbol_error_color)╾)"

filepath_bubble="$(bubble_left)$(foreground $filepath_color)$filepath_symbol$(bubble_right)"

error_code_bubble="%(?,,$(bubble_left)$(foreground $prompt_symbol_error_color)%?$(bubble_right))"

# PROMPTS
# different prompts to try out, just uncomment/comment

# --- 1 ---
#PROMPT='$(ssh_bubble)$user_machine_bubble$filepath_bubble$(git_bubble)'

# --- 2 ---
#PROMPT='$end_of_prompt_bubble'
#PROMPT='$end_of_prompt'
#RPROMPT='$(ssh_bubble)$filepath_bubble$(git_bubble)$error_code_bubble'

# --- 3 ---
_newline=$'\n'
_lineup=$'%{\e[1A%}'
_linedown=$'%{\e[1B%}'

PROMPT='$top_line_start$(pyenv_bubble)$(jdk_bubble)$(new_emails_bubble)$(unread_imessage_bubble)$(next_event_bubble)$line_end$_newline$middle_line_start$ssh_bubble$filepath_bubble$line_end$_newline$end_of_prompt%{$reset_color%}'
RPROMPT='%{$_lineup%}$start_of_rprompt$(git_bubble)$(battery_bubble)$error_code_bubble$line_end%{$_linedown%}%{$reset_color%}'
